import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

if 'user_feedback' not in st.session_state:
    st.session_state['user_feedback'] = [
        {"rating": 5, "text": "Great connections between Asia and Europe!", "time": "2 hours ago"},
        {"rating": 2, "text": "Missing some key historical figures in the latest extraction.", "time": "5 hours ago"},
        {"rating": 4, "text": "Semantic search found unexpected but relevant connections.", "time": "1 day ago"},
    ]

if "logged_in" not in st.session_state or not st.session_state["logged_in"]:
    st.error("You must be logged in to view this page.")
    st.stop()



def generate_pipeline_data():
    days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    data = {
        'Day': days,
        'Volume': np.array([400, 350, 450, 550, 300, 400, 500]) * np.random.uniform(0.9, 1.1, 7)
    }
    return pd.DataFrame(data)

def get_node_details(node_id):
    node_map = {
        "C001": {"name": "Europe", "type": "Concept", "attributes": "European political and cultural structure"},
        "C002": {"name": "Asia", "type": "Historical_Concept", "attributes": "Vast continent with diverse history"},
        "R901": {"name": "America", "type": "Person", "attributes": "North and South continents; diverse geography"}
    }
    return node_map.get(node_id.strip().upper(), None)

def submit_feedback(rating, comment):
    """Adds a new feedback entry to the session state."""
    if comment:
        new_entry = {
            "rating": rating,
            "text": comment,
            "time": "Just now",
        }
        st.session_state['user_feedback'].insert(0, new_entry) 
        st.success("Feedback submitted successfully! Thanks for your input.")
    else:
        st.warning("Please enter a comment before submitting.")



st.title("🛠️ Admin Tools, Correction & Deployment")
st.subheader("Milestone 4: Application Management")

# --- TAB SETUP ---
tab1, tab2 = st.tabs(["📊 Dashboard & Feedback", "🔧 Manual Correction UI"])

with tab1:
    st.header("Admin Dashboard & Monitoring")
    
    # 1. Key Metrics Row
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(label="Total Entities", value="2,847", delta="120 since last week")
    with col2:
        st.metric(label="Total Relations", value="5,632", delta="240 since last week")
    with col3:
        st.metric(label="Extraction Accuracy", value="94%", delta="0.5%", delta_color="normal")
    with col4:
        st.metric(label="System Status", value="Production Ready", delta="No Major Errors")

    st.markdown("---")

    col_chart, col_feedback = st.columns([2, 1])

    with col_chart:
        st.subheader("📈 Processing Pipeline Performance (Nodes/Day)")
        chart_data = generate_pipeline_data()
        st.line_chart(chart_data, x='Day', y='Volume', height=300)
        
        st.subheader("⚙️ Pipeline Status (Last Run)")
        st.progress(100, text="Ingestion: 100% | NLP: 100% | Graph: 100% | Storage: 100%")
        st.success("All pipeline stages completed successfully.")

    with col_feedback:
        st.subheader("➕ Submit New Feedback")
        
        with st.form("new_feedback_form", clear_on_submit=True):
            
            feedback_rating = st.slider(
                "Graph Relevance",
                min_value=1,
                max_value=5,
                value=3, 
                help="Rate the relevance of the graph generated by the latest query (1=Poor, 5=Excellent)"
            )
            
            # 2. Text Area for Comment
            feedback_comment = st.text_area(
                "Comment",
                placeholder="Enter specific comments here (e.g., 'Missing concept X' or 'Links are excellent')",
                key="feedback_comment_input"
            )
            
            # 3. Submit Button
            submitted = st.form_submit_button("Submit Feedback")
            
            if submitted:
                submit_feedback(feedback_rating, feedback_comment)
                st.rerun()
                
        st.markdown("---")

        st.subheader("💬 Recent User Feedback")
        
        for item in st.session_state['user_feedback']:
            emoji = "⭐" * item['rating'] 
            
            if item['rating'] >= 4:
                st.info(f"{emoji} **{item['text']}** ({item['time']})") 
            elif item['rating'] <= 2:
                st.error(f"{emoji} **{item['text']}** ({item['time']})") 
            else:
                st.warning(f"{emoji} **{item['text']}** ({item['time']})") 
                
with tab2:
    st.header("Manual Correction UI")
    
    st.subheader("1. Edit Node Properties")
    
    with st.form("edit_node_form"):
        node_id_to_edit = st.text_input(
            "Node ID to Edit (e.g., C001, R901)", 
            key="edit_node_id_input"
        )
        
        load_button = st.form_submit_button("Load Node Details")

        if load_button:
            node_data = get_node_details(node_id_to_edit)
            if node_data:
                st.session_state['edit_loaded'] = True
                st.session_state['edit_id'] = node_id_to_edit
                st.session_state['edit_name'] = node_data["name"]
                st.session_state['edit_type'] = node_data["type"]
                st.session_state['edit_attributes'] = node_data["attributes"]
                st.success(f"Details loaded for Node: **{node_data['name']}** ({node_id_to_edit})")
            else:
                st.session_state['edit_loaded'] = False
                st.error("Node ID not found or invalid.")

        if st.session_state.get('edit_loaded', False):
            st.markdown(f"**Editing Node ID:** `{st.session_state.edit_id}`")
            
            st.session_state.edit_name = st.text_input(
                "Name", 
                value=st.session_state.edit_name,
                key="name_input"
            )
            st.session_state.edit_type = st.text_input(
                "Type", 
                value=st.session_state.edit_type,
                key="type_input"
            )
            st.session_state.edit_attributes = st.text_area(
                "Attributes/Description", 
                value=st.session_state.edit_attributes,
                key="attributes_input"
            )

            if st.form_submit_button("Save Changes"):
                st.success(f"Node **{st.session_state.edit_name}** ({st.session_state.edit_id}) successfully updated in the graph database!")
                st.session_state['edit_loaded'] = False 

    st.markdown("---")

    st.subheader("2. Merge Concepts")
    st.warning("Merging Node B into Node A will **delete Node B** and transfer all its relationships to Node A.")

    with st.form("merge_concepts_form"):
        col_a, col_b = st.columns(2)
        with col_a:
            node_a_id = st.text_input("Primary Node ID (Node A - KEEP this one)", key="merge_node_a_input")
        with col_b:
            node_b_id = st.text_input("Secondary Node ID (Node B - DELETE this one)", key="merge_node_b_input")

        if st.form_submit_button("Execute Merge"):
            if node_a_id.strip() and node_b_id.strip():
                st.success(f"Successfully merged **{node_b_id}** into **{node_a_id}**. Node B has been deleted.")
            else:
                st.error("Please enter both Node IDs to perform the merge.")

